
services:
  # Serviço da Aplicação PHP (PHP-FPM)
  app:
    build:
      context: ./backend # Caminho para a pasta com o projeto Symfony e o Dockerfile
      dockerfile: Dockerfile # Nome do Dockerfile dentro do contexto
      args: # Passa argumentos para o Dockerfile (para IDs de usuário/grupo)
        UID: "${UID:-1000}" # Usa a variável de ambiente UID ou 1000 como padrão
        GID: "${GID:-1000}" # Usa a variável de ambiente GID ou 1000 como padrão
    container_name: symfony_app_service
    volumes:
      # Monta o código da aplicação Symfony local no contêiner para desenvolvimento
      - ./backend:/srv/app
      # Cache do Composer (opcional, mas acelera instalações repetidas)
      - ./docker/cache:/tmp/composer
    environment:
      # Variáveis de ambiente para a aplicação Symfony (serão lidas pelo .env do Symfony)
      APP_ENV: '${APP_ENV:-dev}'
      APP_SECRET: '${APP_SECRET:-change_this_secret_in_your_env_file}'
      # Exemplo de DATABASE_URL para MySQL (ajuste conforme seu .env do Symfony)
      DATABASE_URL: "mysql://${DB_USER:-symfonyuser}:${DB_PASS:-symfonypass}@db:3306/${DB_NAME:-symfony_db}?serverVersion=8.0&charset=utf8mb4"
      # Para PostgreSQL:
      # DATABASE_URL: "postgresql://${DB_USER:-symfonyuser}:${DB_PASS:-symfonypass}@db:5432/${DB_NAME:-symfony_db}?serverVersion=15&charset=utf8"
      COMPOSER_MEMORY_LIMIT: -1 # Permite que o Composer use memória ilimitada
    depends_on:
      db: # Garante que o serviço 'db' esteja pronto antes de 'app' tentar se conectar
        condition: service_healthy
    networks:
      - symfony_network
    restart: unless-stopped

  # Serviço do Servidor Web (Nginx)
  web:
    image: nginx:1.25-alpine # Imagem Nginx baseada em Alpine
    container_name: symfony_web_service
    ports:
      # Mapeia a porta 8080 do host para a porta 80 do contêiner Nginx
      - "${NGINX_PORT_HOST:-8080}:80"
    volumes:
      # Monta o código da aplicação Symfony (especificamente a pasta 'public')
      - ./backend/public:/srv/app/public
      # Monta o arquivo de configuração do Nginx
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app # Nginx depende do serviço PHP-FPM ('app')
    networks:
      - symfony_network
    restart: unless-stopped

  # Serviço do Banco de Dados (MySQL)
  db:
    image: mysql:8.0 # Imagem MySQL (versão 8.0)
    container_name: symfony_db_service
    environment:
      MYSQL_DATABASE: '${DB_NAME:-symfony_db}'
      MYSQL_USER: '${DB_USER:-symfonyuser}'
      MYSQL_PASSWORD: '${DB_PASS:-symfonypass}'
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASS:-rootpassword}'
    volumes:
      # Volume nomeado para persistir os dados do MySQL
      - ./docker/mysql/data:/var/lib/mysql
      # Se precisar de configurações customizadas do MySQL (my.cnf), descomente:
      # - ./docker/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf
    ports:
      # Mapeia a porta 3306 do contêiner para uma porta no host (ex: 3308 para evitar conflitos)
      - "${DB_PORT_HOST:-3308}:3306"
    networks:
      - symfony_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASS:-rootpassword}"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s
    restart: unless-stopped

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: symfony_phpmyadmin
    environment:
      PMA_HOST: 'db'          # Conecta ao serviço 'db' (MySQL)
      PMA_PORT: ${DB_PORT:-3306}
      # PMA_USER: 'root'      # Opcional: para login automático (requer PMA_ARBITRARY=1 e outras configs)
      # PMA_PASSWORD: '${DB_ROOT_PASS:-rootpassword}' # Opcional
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASS:-rootpassword}' # Para phpMyAdmin se conectar como root
      UPLOAD_LIMIT: 1G        # Limite de upload para arquivos SQL (opcional)
    ports:
      - "8888:80"             # Conforme solicitado, phpMyAdmin na porta 8888 do host
    depends_on:
      - db                    # Precisa do DB, mas não precisa esperar o healthcheck tão estritamente
      # quanto a aplicação Django. Ele tentará conectar.
    restart: unless-stopped
    networks: # Atribui este serviço à rede customizada
      - symfony_network

networks:
  symfony_network: # Define uma rede customizada para os serviços
    driver: bridge
