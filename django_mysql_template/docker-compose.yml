name: django

networks: # Define a rede customizada
  django_network:
    driver: bridge # Usa o driver de rede padrão (bridge)

services:
  db:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: '${DB_NAME:-djangodb}'             # Nome do banco de dados
      MYSQL_USER: '${DB_USER:-djangouser}'               # Usuário do banco
      MYSQL_PASSWORD: '${DB_PASS:-djangopassword}'       # Senha do usuário
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASS:-rootpassword}' # Senha do root do MySQL
    volumes:
      - ./docker/mysql/data:/var/lib/mysql # Volume para persistir os dados do MySQL
      # Se precisar de configurações customizadas do MySQL (my.cnf):
      # - ./path_to_your/my.cnf:/etc/mysql/conf.d/custom.cnf
    ports:
      - "${DB_PORT:-3306}:3306" # Mapeia a porta 3306 do container para 3307 no host (evita conflitos)
    restart: unless-stopped
    networks: # Atribui este serviço à rede customizada
      - django_network
    healthcheck:
      # Testa se o MySQL está pronto para aceitar conexões
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASS:-rootpassword}"]
      interval: 10s        # Intervalo entre verificações
      timeout: 5s          # Tempo máximo para a verificação responder
      retries: 10          # Número de tentativas antes de marcar como 'unhealthy'
      start_period: 40s    # Período inicial para o container iniciar antes de começar os healthchecks

  backend:
    build:
      context: ./backend  # Caminho para a pasta com o Dockerfile do Django
      dockerfile: Dockerfile
    # Comando para rodar após o build da imagem e o DB estar saudável
    # Primeiro espera o DB (redundante se healthcheck é 100% confiável, mas seguro),
    # depois migra e então inicia o servidor de desenvolvimento.
    # Para produção, você usaria Gunicorn.
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app  # Monta o código local na pasta /app do container para live reload
    ports:
      - "80:8000"     # Mapeia a porta 8000 do container para a porta 8000 do host
    environment:
      # Variáveis de ambiente para o Django (ver settings.py)
      - DJANGO_SETTINGS_MODULE=base.settings # Ajuste 'base' se o nome do seu projeto for outro
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change_me_please_a_very_strong_secret_key}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DB_ENGINE=django.db.backends.mysql
      - DB_NAME=${DB_NAME:-djangodb}
      - DB_USER=${DB_USER:-djangouser}
      - DB_PASS=${DB_PASS:-djangopassword}
      - DB_HOST=db        # Nome do serviço do banco de dados definido neste docker-compose
      - DB_PORT=${DB_PORT:-3306}      # Porta interna do MySQL no container
    depends_on:
      db:
        condition: service_healthy # Garante que o 'backend' só inicie DEPOIS que o 'db' estiver saudável
    restart: unless-stopped
    networks: # Atribui este serviço à rede customizada
      - django_network

  phpmyadmin:
    image: phpmyadmin:latest
    environment:
      PMA_HOST: 'db'          # Conecta ao serviço 'db' (MySQL)
      PMA_PORT: ${DB_PORT:-3306}
      # PMA_USER: 'root'      # Opcional: para login automático (requer PMA_ARBITRARY=1 e outras configs)
      # PMA_PASSWORD: '${DB_ROOT_PASS:-rootpassword}' # Opcional
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASS:-rootpassword}' # Para phpMyAdmin se conectar como root
      UPLOAD_LIMIT: 1G        # Limite de upload para arquivos SQL (opcional)
    ports:
      - "8888:80"             # Conforme solicitado, phpMyAdmin na porta 8888 do host
    depends_on:
      - db                    # Precisa do DB, mas não precisa esperar o healthcheck tão estritamente
      # quanto a aplicação Django. Ele tentará conectar.
    restart: unless-stopped
    networks: # Atribui este serviço à rede customizada
      - django_network
